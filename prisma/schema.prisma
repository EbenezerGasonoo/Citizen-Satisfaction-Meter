// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model Minister {
  id        Int      @id @default(autoincrement())
  fullName  String
  portfolio String
  photoUrl  String
  bio       String?
  createdAt DateTime @default(now())
  votes     Vote[]
  favorites Favorite[]
  comments  Comment[]
  policies  Policy[]
  isTrending Boolean @default(false)
}

model Policy {
  id          Int      @id @default(autoincrement())
  title       String
  description String
  category    String   // e.g., "Economic", "Social", "Infrastructure", "Security"
  status      String   // "Active", "Completed", "Planned", "Suspended"
  startDate   DateTime?
  endDate     DateTime?
  budget      Float?
  impact      String   // "High", "Medium", "Low"
  ministerId  Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  minister    Minister @relation(fields: [ministerId], references: [id])
  votes       PolicyVote[]
}

model PolicyVote {
  id         Int      @id @default(autoincrement())
  policyId   Int
  positive   Boolean  // true = Satisfied with policy
  clientHash String   // SHA-256(ip + ua + salt)
  createdAt  DateTime @default(now())
  policy     Policy   @relation(fields: [policyId], references: [id])

  @@unique([policyId, clientHash])
}

model Vote {
  id         Int      @id @default(autoincrement())
  ministerId Int
  positive   Boolean  // true = Satisfied
  clientHash String   // SHA-256(ip + ua + salt)
  createdAt  DateTime @default(now())
  minister   Minister @relation(fields: [ministerId], references: [id])
}

model Favorite {
  id         Int      @id @default(autoincrement())
  ministerId Int
  clientHash String   // SHA-256(ip + ua + salt) - same as Vote
  createdAt  DateTime @default(now())
  minister   Minister @relation(fields: [ministerId], references: [id])

  @@unique([ministerId, clientHash])
}

model Comment {
  id         Int      @id @default(autoincrement())
  ministerId Int
  content    String
  clientHash String   // SHA-256(ip + ua + salt)
  createdAt  DateTime @default(now())
  minister   Minister @relation(fields: [ministerId], references: [id])
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  role          String    @default("USER") // USER, ADMIN
  accounts      Account[]
  sessions      Session[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
} 